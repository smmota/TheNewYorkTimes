trigger:
- feature/TechChallengeFase3

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5daa03ca-34fa-4705-99f9-2bfe985ba8d9'
  imageRepository: 'techchallengefase'
  containerRegistry: 'techchallengefase3acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Tests
  displayName: Tests Stage
  jobs:
  - job: Build
    displayName: Run Unit and Integration Tests
    pool:
      vmImage: $(vmImageName)
    steps:
      - checkout: self

      - task: UseDotNet@2
        displayName: Setup .NET
        inputs:
          packageType: 'sdk'
          version: '7.x'

      - task: DotNetCoreCLI@2
        displayName: Restore dependencies
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          arguments: '--configuration Release'

      - task: PowerShell@2
        displayName: Delay before tests
        inputs:
          targetType: 'inline'
          script: |
            docker pull postgres
            docker run  -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=1020304050 -e POSTGRES_DB=postgres -p 5432:5432 -d postgres


      - task: DotNetCoreCLI@2
        displayName: Run tests
        inputs:
          command: 'test'
          projects: '**/*.csproj'
          arguments: '--configuration Release'

- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          lasted



